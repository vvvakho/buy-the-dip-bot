// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ManageRSI.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addRSI = `-- name: AddRSI :one
INSERT INTO rsi (rsi_id, ticker, rsi, date)
VALUES ($1, $2, $3, $4)
RETURNING rsi_id, ticker, rsi, date
`

type AddRSIParams struct {
	RsiID  uuid.UUID
	Ticker string
	Rsi    float64
	Date   time.Time
}

func (q *Queries) AddRSI(ctx context.Context, arg AddRSIParams) (Rsi, error) {
	row := q.db.QueryRowContext(ctx, addRSI,
		arg.RsiID,
		arg.Ticker,
		arg.Rsi,
		arg.Date,
	)
	var i Rsi
	err := row.Scan(
		&i.RsiID,
		&i.Ticker,
		&i.Rsi,
		&i.Date,
	)
	return i, err
}

const checkRSI = `-- name: CheckRSI :one
SELECT rsi_id, ticker, rsi, date
FROM rsi
WHERE ticker = $1 AND date::DATE = $2::DATE
LIMIT 1
`

type CheckRSIParams struct {
	Ticker  string
	Column2 time.Time
}

func (q *Queries) CheckRSI(ctx context.Context, arg CheckRSIParams) (Rsi, error) {
	row := q.db.QueryRowContext(ctx, checkRSI, arg.Ticker, arg.Column2)
	var i Rsi
	err := row.Scan(
		&i.RsiID,
		&i.Ticker,
		&i.Rsi,
		&i.Date,
	)
	return i, err
}
